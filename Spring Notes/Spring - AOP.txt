Spring - AOP
===================

Advantages
-----------

1. Code for Aspect defined ina single class
       a. Much better than being scattered everywhere
	   b. Promote code reuse and easier to change
	   
2. Business code in your application is cleaner
       a. Only applies to required business functionality (eg. addAccount)
       b. Reduces code complexity

3. Configurable
       a. Based on configuration, apply Aspects selectively to different parts of application
       b. No need to change the main application code
	   

Disadvantages
--------------

1. Too many aspects & application flow is hard to follow

2. Minor performance cost for aspect execution


Use Cases
-----------

1. Most Common - logging, security, transactions

2. Audit Logging - who, what, when, where

3. Exception Handling - log exception & notify DevOps team via SMS/email

4. API Management - how many times a method has been called
                  - analytics: what are peak times?, what is the average load?, who is the top user?
				  
				  
Terminology
------------

1. Aspect: module of code for a cross-cutting concerns (logging, security)

2. Advice: what action is taken and when it should be applied
       
	   a. Before advice - run before method
	   b. After finally advice - run after the method (finally)
	   c. After returning advice - run after the method (success execution)
	   d. After throwing advice - run after method (if exception thrown)
	   e. Around advice - run before and after method

3. Joint Point: when to apply code during program execution

4. Pointcut: A predicate expression (condition) for where advice should be applied.

5. Weaving: connecting aspects to target objects to create an advised object
       a. complie-time
	   b. load-time
	   c. run-time (slowest)
	   
	   
Frameworks
-------------

1. Spring AOP
       - light-weight
	   - simpler to use
	   - has integrated common usages like, logging, security, caching
	   - uses proxy pattern
	   - can be migrated to AspectJ when using @Aspect annotation
	   - run-time weaving only
	   - method-level join points only
       

2. AspectJ
       - fully featured (complete support)
	   - complex to use
	   - works with any POJO, not just beans from application context
	   - faster performance wrt Spring AOP
	   - joint points @ method-level, constructor-level, field-level (all)
	   - code weaving @ compile-time, post compile-time, load-time

	   
	   
Pointcut
----------------

execution pointcut

execution (modifiers-pattern? return-type-pattern declaring-type-pattern? method-name-pattern(param-pattern) throws-pattern?)

? => optional
pattern can use wildcards

Parameter pattern wildcards
    1. ()   -> method with no parameter
	2. (*)  -> method with one argument of any type
	3. (..) -> method with 0 or more argument of any type