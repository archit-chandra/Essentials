REST design steps
==================
    1. Identify the resource - which objects needs to be exposed
	2. Create URIs to access those resources - to easily access above resources 
	   [@Path=("/users/{username}")]
	3. Assign HTTP methods - to perform CRUD operations on above resources 
	   [@Get, @Post, @Put, @Delete]
	4. Choose the data format - json, xml, csv 
	   [@Consumes("text/plain")]
	   [@Produces({"application/json", "application/xml"})]
								
	

Parameter Values
==================	
	[@PathParam] - to map the values coming from URI to a Java object as method parameter 
	               to use those values inside that method
	
	[@QueryParam] - to map a request query parameter in a get method to to Java object
	                (automatic binding)
					
	[@FormParam] - to map values coming from a form submission to a Java object as method parameter
	
	
Exception Mappers
==================

    [@Provider] - to implement custom exception mapper which will map Java application exception to HTTP error codes
	
	
JSON Support
==================
    1. Add JSON dependencies
	       a. jackson-jaxrs
		   b. jackson-xc
    2. Change the configuration
	3. Use @Consumes, @Produces
	
	
	
HTTP Status Codes
==================
    1. Success: 200-399
	2. Failure: 400-599
	                   a. 400: Bad Request Exception
					   b. 401: Not Authorized Exception
					   c. 403: Forbidden Exception
					   d. 500: Internal Server Exception
					   e. 503: Service Unavailable Exception
	       Standard Errors    -  Common across restful application(irrespective of language implemented)
                                 eg.: wrong URI, wrong data type/wrong content type		   
		   Application Errors -  specific to particular application
		                         eg.: 
	
	
	
	